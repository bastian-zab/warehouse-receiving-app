// ignore_for_file: prefer_const_constructors, prefer_const_literals_to_create_immutables, prefer_typing_uninitialized_variables
import 'package:flutter/material.dart';
import 'package:flutter_application_1/data/object_box_models.dart';
import 'package:flutter_application_1/data/providers.dart';
import 'package:flutter_application_1/main.dart';
import 'package:flutter_application_1/objectbox.g.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

Box<SupplierModel> box = objectBoxStore.supplierModelBox;
final rowProvider = StateNotifierProvider<RowProvider, int>((ref) {
  return RowProvider(1);
});

final supplierListProvider =
    StateNotifierProvider<SupllierListProvider, List<SupplierModel>>((ref) {
  return SupllierListProvider(box.getAll());
});

final CurrentSupplierProvider =
    StateNotifierProvider<CurrentSupplierProvider, int>((ref) {
  return CurrentSupplierProvider(1);
});

class InputScreen extends ConsumerWidget {
  InputScreen({Key? key}) : super(key: key);

  final firstFormKey = GlobalKey<FormState>();

  final secondFormKey = GlobalKey<FormState>();

  final supplierNameController = TextEditingController();

  final invoiceNumberController = TextEditingController();

  final itemsNumberController = TextEditingController();

  final itemNameController = TextEditingController();

  final invoicedQuantityController = TextEditingController();

  final receivedQuantityController = TextEditingController();

  final unitController = TextEditingController();

  final commentsController = TextEditingController();

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    Widget whichRow() {
      int number = ref.watch(rowProvider);
      if (number < 2) {
        return FirstForm(
          formKey: firstFormKey,
          supplierNameController: supplierNameController,
          invoiceNumberController: invoiceNumberController,
          itemsNumberController: itemsNumberController,
        );
      } else {
        return SecondForm(
          formKey: secondFormKey,
        );
      }
    }

    return WillPopScope(
      onWillPop: () async {
        ref.read(rowProvider.notifier).firstrow();
        return true;
      },
      child: Scaffold(
        appBar: AppBar(
          backgroundColor: Colors.transparent,
          elevation: 0,
        ),
        backgroundColor: Color(0xFFffffff),
        body: SingleChildScrollView(
          child: Container(
            padding: const EdgeInsets.only(left: 40, right: 40),
            child: whichRow(),
          ),
        ),
      ),
    );
  }
}

class FirstForm extends ConsumerWidget {
  const FirstForm({
    Key? key,
    required this.formKey,
    required this.supplierNameController,
    required this.invoiceNumberController,
    required this.itemsNumberController,
  }) : super(key: key);

  final GlobalKey<FormState> formKey;
  final TextEditingController supplierNameController;
  final TextEditingController invoiceNumberController;
  final TextEditingController itemsNumberController;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final double height = MediaQuery.of(context).size.height;
    return Form(
        key: formKey,
        child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
          SizedBox(height: height * 0.02),
          Text(
            "Let's Start",
            style: TextStyle(fontSize: 40, color: Color(0xFF363f93)),
          ),
          Text(
            "Here",
            style: TextStyle(fontSize: 40, color: Color(0xFF363f93)),
          ),
          SizedBox(height: height * 0.05),
          TextFormField(
            controller: supplierNameController,
            decoration: InputDecoration(labelText: 'Enter Supplier'),
            validator: (value) {
              if (value!.isEmpty) {
                return 'Please Enter Supplier Name';
              } else {
                return null;
              }
            },
          ),
          SizedBox(height: height * 0.05),
          TextFormField(
            controller: invoiceNumberController,
            decoration: InputDecoration(labelText: 'Enter Invoice Number'),
            validator: (value) {
              if (value!.isEmpty) {
                return 'Please Enter Invoice Number';
              } else {
                return null;
              }
            },
          ),
          SizedBox(height: height * 0.05),
          TextFormField(
            controller: itemsNumberController,
            keyboardType: TextInputType.number,
            decoration: InputDecoration(labelText: 'Enter Number Of Items'),
            validator: (value) {
              if (value!.isEmpty) {
                return 'Please Enter Number of Items';
              } else {
                return null;
              }
            },
          ),
          SizedBox(height: height * 0.06),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Create Entry',
                style: TextStyle(fontSize: 25, color: Color(0xFF363f93)),
              ),
              IconButton(
                icon: Icon(
                  Icons.navigate_next_outlined,
                  size: 40,
                  color: Color(0xFF363f93),
                ),
                onPressed: () {
                  if (formKey.currentState!.validate()) {
                    SupplierModel supplier = SupplierModel(
                        supplierName: supplierNameController.text,
                        invoiceNumber: invoiceNumberController.text,
                        createdBy: 'Bastian');
                    final mySnackBar = SnackBar(content: Text('Submited'));
                    ScaffoldMessenger.of(context).showSnackBar(mySnackBar);
                    int itemsNum = int.parse(itemsNumberController.text);
                    ref
                        .read(CurrentSupplierProvider.notifier)
                        .setItemsNumber(itemsNum);
                    ref.read(rowProvider.notifier).secondrow();
                    ref.read(supplierListProvider.notifier).add(supplier);
                  }
                },
              )
            ],
          ),
        ]));
  }
}

class SecondForm extends ConsumerWidget {
  const SecondForm({
    Key? key,
    required this.formKey,
  }) : super(key: key);

  final GlobalKey<FormState> formKey;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final double height = MediaQuery.of(context).size.height;
    List myControllers = <TextEditingController>[];
    var listOfMyControllers = [];

    List<ItemRow> createrow() {
      int itemCount = ref.watch(CurrentSupplierProvider);

      List<ItemRow> _ = [];
      for (var i = 0; i < itemCount; i++) {
        myControllers.add(listOfMyControllers);
        _.add(ItemRow(
          height: height,
          mycontrollers: listOfMyControllers[i],
        ));
        for (var z = 0; z < 4; z++) {
          myControllers[i].add(TextEditingController());
        }
      }

      return _;
    }

    return Form(
        key: formKey,
        child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
          SizedBox(height: height * 0.02),
          Text(
            "Now Enter Item",
            style: TextStyle(fontSize: 40, color: Color(0xFF363f93)),
          ),
          Text(
            "Details",
            style: TextStyle(fontSize: 40, color: Color(0xFF363f93)),
          ),
          SizedBox(height: height * 0.05),
          Column(
            children: createrow(),
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Complete',
                style: TextStyle(fontSize: 25, color: Color(0xFF363f93)),
              ),
              IconButton(
                icon: Icon(
                  Icons.navigate_next_outlined,
                  size: 40,
                  color: Color(0xFF363f93),
                ),
                onPressed: () {
                  if (formKey.currentState!.validate()) {
                    final mySnackBar = SnackBar(content: Text('Submited'));
                    ScaffoldMessenger.of(context).showSnackBar(mySnackBar);
                  }
                },
              )
            ],
          ),
        ]));
  }
}

class ItemRow extends StatelessWidget {
  const ItemRow({Key? key, required this.height, required this.mycontrollers})
      : super(key: key);

  final double height;
  final List<TextEditingController> mycontrollers;

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Row(
          children: [
            Expanded(
              flex: 3,
              child: TextFormField(
                decoration: InputDecoration(labelText: 'Item Supplied'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please Enter Item';
                  } else {
                    return null;
                  }
                },
              ),
            ),
            SizedBox(width: height * 0.02),
            Expanded(
              flex: 2,
              child: TextFormField(
                decoration: InputDecoration(labelText: 'Qty Invoiced'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please Enter Quantity In Invoice';
                  } else {
                    return null;
                  }
                },
              ),
            ),
            SizedBox(width: height * 0.02),
            Expanded(
              flex: 1,
              child: TextFormField(
                decoration: InputDecoration(labelText: 'Units'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please Enter Units';
                  } else {
                    return null;
                  }
                },
              ),
            ),
          ],
        ),
        Row(
          children: [
            Expanded(
              flex: 1,
              child: TextFormField(
                decoration: InputDecoration(labelText: 'Qty received'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please Enter Quantity Received';
                  } else {
                    return null;
                  }
                },
              ),
            ),
            SizedBox(width: height * 0.01),
            Expanded(
              flex: 3,
              child: TextFormField(
                decoration:
                    InputDecoration(labelText: 'Reason For Returns/Comments'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return null;
                  } else {
                    return null;
                  }
                },
              ),
            ),
          ],
        ),
        SizedBox(height: height * 0.05),
      ],
    );
  }
}

class ItemRow extends StatelessWidget {
  const ItemRow({Key? key, required this.height, required this.mycontrollers})
      : super(key: key);

  final double height;
  final List<TextEditingController> mycontrollers;

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Row(
          children: [
            Expanded(
              flex: 3,
              child: TextFormField(
                decoration: InputDecoration(labelText: 'Item Supplied'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please Enter Item';
                  } else {
                    return null;
                  }
                },
              ),
            ),
            SizedBox(width: height * 0.02),
            Expanded(
              flex: 2,
              child: TextFormField(
                decoration: InputDecoration(labelText: 'Qty Invoiced'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please Enter Quantity In Invoice';
                  } else {
                    return null;
                  }
                },
              ),
            ),
            SizedBox(width: height * 0.02),
            Expanded(
              flex: 1,
              child: TextFormField(
                decoration: InputDecoration(labelText: 'Units'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please Enter Units';
                  } else {
                    return null;
                  }
                },
              ),
            ),
          ],
        ),
        Row(
          children: [
            Expanded(
              flex: 1,
              child: TextFormField(
                decoration: InputDecoration(labelText: 'Qty received'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please Enter Quantity Received';
                  } else {
                    return null;
                  }
                },
              ),
            ),
            SizedBox(width: height * 0.01),
            Expanded(
              flex: 3,
              child: TextFormField(
                decoration:
                    InputDecoration(labelText: 'Reason For Returns/Comments'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return null;
                  } else {
                    return null;
                  }
                },
              ),
            ),
          ],
        ),
        SizedBox(height: height * 0.05),
      ],
    );
  }
}


// ignore_for_file: prefer_const_constructors

import 'package:flutter/material.dart';
import 'package:flutter_application_1/data/item_builder.dart';
import 'package:flutter_application_1/widgets/constants.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

class DetailsPage extends ConsumerWidget {
  const DetailsPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final double height = MediaQuery.of(context).size.height;
    return Scaffold(
      appBar: AppBar(
        title: Text('Gone to Dogs'),
      ),
      body: Center(
        child: Container(
          padding: EdgeInsets.all(8.0),
          child: Column(
            children: [
              Column(
                // mainAxisAlignment: MainAxisAlignment.start,
                // crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    "Pembe Flour Mills",
                    style: TextStyle(fontSize: 30, color: Color(0xFF363f93)),
                  ),
                  Text('355773567'),
                  SizedBox(height: height * 0.05),
                ],
              ),
              SizedBox(height: height * 0.05),
              MyListView(),
            ],
          ),
        ),
      ),
    );
  }
}
